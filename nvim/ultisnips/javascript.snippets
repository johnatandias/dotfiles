snippet csl "console.log('=>', {})" b
console.log('=>', { $1 });
endsnippet

snippet csls "console.log('=>', JSON.stringify({}, null, 2));" b
console.log('=>', JSON.stringify({ $2 }, null, 2));
endsnippet

snippet imp "import { x } from 'y'" b
import { $2 } from '$1';
endsnippet

snippet impd "import x from 'y'" b
import $2 from '$1';
endsnippet

snippet impa "import * as x from 'y'" b
import * as $2 from '$1';
endsnippet

snippet try "try/catch" b
try {
	$2
} catch(error) {
	console.log('=>', { error: error.message });$1
}
endsnippet

snippet fn "() => {}" i
const $1 = ${2:($3)} => ${4:{
  $5
}};
endsnippet

snippet afn "() => {}" i
${2:($3)} => ${4:{
  $5
}}
endsnippet

snippet cf "() {}" b
$1 ($2) {
	$3
}
endsnippet

snippet it "it('', () => {})" b
it('$1', () => {
	$2
});
endsnippet

snippet desc "describe('', () => {})" b
describe('$1', () => {
	$2
});
endsnippet

snippet co "const = " b
const $1 = $2
endsnippet

snippet obj "= {}" b
const $1 = {
	$2
}
endsnippet

snippet arr "= []" b
const $1 = [
	$2
]
endsnippet

snippet des "const {} =" b
const { $1 } = $2
endsnippet

snippet rfc "React function component" b
import React from 'react';

const $1 = ${2:($3)} => {
	return (
		<$4>$1$5</$4>
	)
}

export default $1;
endsnippet

snippet dev "process.env.NODE_ENV !== 'production'" w
process.env.NODE_ENV !== 'production';
endsnippet

snippet prod "process.env.NODE_ENV === 'production'" w
process.env.NODE_ENV === 'production';
endsnippet

snippet useS "useState" w
const [${1}, set${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}] = useState($3);
endsnippet

snippet useE "useEffect" w
useEffect(() => {
	$2
}, [$1])${0:;}
endsnippet

snippet useC "useCallback" w
const ${1:functionName} useCallback(() => {$3},[$2])${0:;}
endsnippet

snippet useR "useRef" w
const $1 = useRef($2)${0:;}
endsnippet

